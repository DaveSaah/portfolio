---
import { Moon, Sun } from 'lucide-react';
import { Button } from '@/components/ui/button';

// Génère un ID unique pour chaque instance du composant
const uniqueId = `themeToggle-${crypto.randomUUID().slice(0, 8)}`;
---

<Button
  variant="ghost"
  size="icon"
  id={uniqueId}
  className="transition-all cursor-pointer"
>
  <Sun className="h-[1.5rem] w-[1.3rem] dark:hidden" />
  <Moon className="hidden h-5 w-5 dark:block" />
  <span class="sr-only">Toggle theme</span>
</Button>

<script define:vars={{ buttonId: uniqueId }}>
  const applyThemeFromLocalStorage = () => {
    const theme =
      (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) ||
      'light';
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  };

  const handleToggleClick = () => {
    document.documentElement.classList.toggle('dark');
    const isDark = document.documentElement.classList.contains('dark');
    if (typeof localStorage !== 'undefined') {
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
    }
  };

  const setupThemeToggleButton = () => {
    const toggleButton = document.getElementById(buttonId);
    if (toggleButton) {
      toggleButton.removeEventListener('click', handleToggleClick); // Prevent duplicate listeners
      toggleButton.addEventListener('click', handleToggleClick);
    }
  };

  // For View Transitions: Apply theme *immediately* after new DOM is swapped.
  document.addEventListener('astro:after-swap', applyThemeFromLocalStorage);

  // For initial load and re-attaching button listener after page transitions:
  if (document.readyState === 'loading') {
    // Ensures button listener is attached after initial DOM is ready.
    // Theme is already applied by the inline script in <head> of BaseLayout.astro for initial paint.
    document.addEventListener('DOMContentLoaded', setupThemeToggleButton);
  } else {
    setupThemeToggleButton(); // If script loads after DOMContentLoaded.
  }
  // astro:page-load is for scripts that need to run after the page is fully loaded and painted.
  // Good for re-attaching listeners to elements that might have been re-rendered.
  document.addEventListener('astro:page-load', setupThemeToggleButton);

  // MutationObserver to sync localStorage if the 'dark' class changes by other means (e.g., dev tools).
  if (
    typeof localStorage !== 'undefined' &&
    !document.documentElement.hasAttribute('data-theme-observer-toggle')
  ) {
    const observer = new MutationObserver(() => {
      const isDarkNow = document.documentElement.classList.contains('dark');
      const storedTheme = localStorage.getItem('theme');
      if (
        (isDarkNow && storedTheme !== 'dark') ||
        (!isDarkNow && storedTheme !== 'light')
      ) {
        localStorage.setItem('theme', isDarkNow ? 'dark' : 'light');
      }
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['class'],
    });
    document.documentElement.setAttribute('data-theme-observer-toggle', 'true');
  }
</script>
